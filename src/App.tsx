import { useState, useRef, useEffect } from "react";
import {
  Send,
  Phone,
  AlertTriangle,
  Heart,
  Shield,
  Clock,
  Brain,
  Wifi,
  WifiOff,
} from "lucide-react";

const AssistantPremiersSecours = () => {
  const [messages, setMessages] = useState([
    {
      sender: "assistant",
      text: "üö® Assistant de premiers secours activ√© avec IA m√©dicale MedAlpaca.\n\nVous pouvez :\n‚Ä¢ D√©crire une situation d'urgence pour des conseils imm√©diats\n‚Ä¢ Poser des questions m√©dicales g√©n√©rales\n‚Ä¢ Utiliser les suggestions rapides ci-dessous\n\nEn cas d'urgence vitale imm√©diate, appelez le  18 !",
      timestamp: new Date(),
    },
  ]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [aiStatus, setAiStatus] = useState("ready"); // ready, error, loading
  const messagesEndRef = useRef<HTMLDivElement | null>(null);

  // Configuration MedAlpaca
  const HUGGINGFACE_API_URL =
    "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium";
  const HF_API_KEY = import.meta.env.VITE_REACT_APP_HUGGINGFACE_API_KEY;

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Base de connaissances des premiers secours (fallback)
  const premierSecoursDB = {
    etouffement: {
      keywords: ["√©touffe", "etouff", "avale", "respire plus", "obstruction"],
      response:
        "üö® URGENCE - √âTOUFFEMENT:\n\n1.  Appelez le  18 imm√©diatement \n2. Si la personne peut encore tousser ‚Üí Encouragez-la √† tousser\n3. Si elle ne peut plus tousser :\n   ‚Ä¢ Adulte: 5 claques dans le dos + compression abdominale (man≈ìuvre de Heimlich)\n   ‚Ä¢ B√©b√©: T√™te en bas, 5 claques entre omoplates\n4. Alternez jusqu'√† d√©sobstruction ou arriv√©e secours",
      isEmergency: true,
    },
    inconscience: {
      keywords: [
        "inconscient",
        "evanoui",
        "sans connaissance",
        "ne r√©pond pas",
      ],
      response:
        "üö® URGENCE - PERTE DE CONSCIENCE:\n\n1.  Appelez le  18 imm√©diatement \n2. V√©rifiez la respiration (10 secondes max)\n3. Si elle respire: Position Lat√©rale de S√©curit√© (PLS)\n4. Si elle ne respire pas: Massage cardiaque + bouche-√†-bouche\n5. Restez avec la personne jusqu'aux secours",
      isEmergency: true,
    },
    saignement: {
      keywords: ["saigne", "sang", "h√©morragie", "coupure", "blessure"],
      response:
        "ü©∏ SAIGNEMENT IMPORTANT:\n\n1.  Si saignement abondant ‚Üí Appelez le  18 \n2. Compression directe avec tissu propre\n3. Sur√©levez le membre si possible\n4. Ne retirez JAMAIS un objet plant√©\n5. Point de compression si n√©cessaire\n6. Surveillez les signes de choc",
      isEmergency: false,
    },
    brulure: {
      keywords: ["br√ªlure", "brule", "feu", "eau chaude", "vapeur"],
      response:
        "üî• BR√õLURE:\n\n1.  Si √©tendue/grave ‚Üí Appelez le  18 \n2. Refroidir imm√©diatement (eau froide  18-20min)\n3. Retirer bijoux/v√™tements non coll√©s\n4. Ne PAS percer les cloques\n5. Couvrir avec linge propre\n6. Surveiller signes de choc",
      isEmergency: false,
    },
    malaise: {
      keywords: [
        "malaise",
        "douleur poitrine",
        "crise cardiaque",
        "avc",
        "vertiges",
      ],
      response:
        "üíî MALAISE/DOULEUR THORACIQUE:\n\n1.  Appelez le  18 imm√©diatement \n2. Installez en position demi-assise\n3. Desserrez les v√™tements\n4. Ne donnez rien √† boire/manger\n5. Rassurez et surveillez constamment\n6. Pr√©parez-vous √† la r√©animation si n√©cessaire",
      isEmergency: true,
    },
    fracture: {
      keywords: ["fracture", "cass√©", "entorse", "douleur os", "d√©form√©"],
      response:
        "ü¶¥ FRACTURE/ENTORSE:\n\n1. Ne bougez pas la zone bless√©e\n2. Immobilisez avec attelle improvis√©e\n3. Appliquez froid (pas directement sur peau)\n4.  Si fracture ouverte/d√©formation ‚Üí Appelez le  18 \n5. Surveillez circulation en aval\n6. Transport m√©dicalis√© si n√©cessaire",
      isEmergency: false,
    },
  };

  // Fonction pour appeler l'API MedAlpaca
  const callMedAlpacaAPI = async (question: string) => {
    if (!HF_API_KEY) {
      throw new Error("Cl√© API Hugging Face manquante");
    }

    const prompt = `Tu es un assistant m√©dical d'urgence fran√ßais. R√©ponds en fran√ßais avec des conseils de premiers secours pr√©cis et clairs. Si c'est une urgence vitale, mentionne d'appeler le 18.

Question: ${question}

R√©ponse:`;

    try {
      const response = await fetch(HUGGINGFACE_API_URL, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${HF_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          inputs: prompt,
          parameters: {
            max_new_tokens: 500,
            temperature: 0.3,
            do_sample: true,
            top_p: 0.9,
            return_full_text: false,
          },
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error);
      }

      // Extraire la r√©ponse g√©n√©r√©e
      let generatedText = "";
      if (Array.isArray(data) && data[0]?.generated_text) {
        generatedText = data[0].generated_text;
      } else if (data.generated_text) {
        generatedText = data.generated_text;
      } else {
        throw new Error("Format de r√©ponse inattendu");
      }

      // Nettoyer la r√©ponse (retirer le prompt s'il est inclus)
      const cleanedResponse = generatedText.replace(prompt, "").trim();

      return {
        text: cleanedResponse || generatedText,
        isEmergency:
          cleanedResponse.toLowerCase().includes("18") ||
          cleanedResponse.toLowerCase().includes("urgence") ||
          cleanedResponse.toLowerCase().includes("pompiers"),
        source: "medalpaca",
      };
    } catch (error) {
      console.error("Erreur API MedAlpaca:", error);
      throw error;
    }
  };

  // Analyser avec la base de connaissances locale (fallback)
  const analyzeEmergency = (text: string) => {
    const textLower = text.toLowerCase();

    for (const [type, data] of Object.entries(premierSecoursDB)) {
      if (data.keywords.some((keyword) => textLower.includes(keyword))) {
        return {
          type,
          response: data.response,
          isEmergency: data.isEmergency,
          source: "local",
        };
      }
    }

    return {
      type: "general",
      response:
        "‚ö†Ô∏è Situation non identifi√©e automatiquement.\n\nConseils g√©n√©raux:\n1. √âvaluez la gravit√©\n2. Si doute ‚Üí Appelez le 18\n3. S√©curisez la zone\n4. Ne bougez pas la victime sauf danger\n5. Surveillez les constantes vitales\n\n En cas d'urgence vitale, appelez toujours le 18 ",
      isEmergency: false,
      source: "local",
    };
  };

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage = { sender: "user", text: input, timestamp: new Date() };
    setMessages((prev) => [...prev, userMessage]);
    setIsLoading(true);
    setInput("");

    try {
      let response;

      setAiStatus("loading");
      try {
        response = await callMedAlpacaAPI(input);
        setAiStatus("ready");
      } catch (error) {
        console.error("Erreur MedAlpaca, utilisation du fallback:", error);
        setAiStatus("error");
        response = analyzeEmergency(input);
      }

      // Ajouter un d√©lai pour simuler le traitement
      await new Promise((resolve) => setTimeout(resolve, 2000));

      const assistantMessage = {
        sender: "assistant",
        text: "text" in response ? response.text : response.response,
        timestamp: new Date(),
        isEmergency: response.isEmergency,
        source: response.source,
      };

      setMessages((prev) => [...prev, assistantMessage]);
    } catch (error) {
      const errorMessage = {
        sender: "assistant",
        text:
          "‚ùå Erreur lors du traitement. Utilisation des conseils de base.\n\n" +
          analyzeEmergency(input).response,
        timestamp: new Date(),
        isEmergency: true,
        source: "error",
      };
      setMessages((prev) => [...prev, errorMessage]);
      setAiStatus("error");
    } finally {
      setIsLoading(false);
    }
  };

  const handleEmergencyCall = () => {
    alert(
      "üö® Composition du 18\n\nEn situation r√©elle, votre t√©l√©phone composerait automatiquement le 18.\n\nInformations √† donner:\n- Votre localisation exacte\n- Nature de l'urgence\n- √âtat de la victime\n- Votre num√©ro de t√©l√©phone"
    );
  };

  const getSourceIcon = (source: unknown) => {
    switch (source) {
      case "medalpaca":
        return <Brain className="w-4 h-4 text-blue-600" />;
      case "local":
        return <Shield className="w-4 h-4 text-green-600" />;
      case "error":
        return <AlertTriangle className="w-4 h-4 text-red-600" />;
      default:
        return null;
    }
  };

  const getSourceLabel = (source: unknown) => {
    switch (source) {
      case "medalpaca":
        return "IA M√©dicale";
      case "local":
        return "Base locale";
      case "error":
        return "Mode d√©grad√©";
      default:
        return "";
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-blue-50 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="bg-red-500 p-3 rounded-full">
                <Heart className="w-8 h-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-800">
                  Assistant Premiers Secours
                </h1>
                <p className="text-gray-600 flex items-center space-x-2">
                  <span>Intelligence artificielle m√©dicale MedAlpaca</span>
                  <span className="flex items-center space-x-1">
                    {aiStatus === "ready" && (
                      <Wifi className="w-4 h-4 text-green-500" />
                    )}
                    {aiStatus === "error" && (
                      <WifiOff className="w-4 h-4 text-red-500" />
                    )}
                    {aiStatus === "loading" && (
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent"></div>
                    )}
                  </span>
                </p>
              </div>
            </div>

            <div className="flex items-center space-x-4">
              <button
                onClick={handleEmergencyCall}
                className="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-lg font-semibold flex items-center space-x-2 transition-colors"
              >
                <Phone className="w-5 h-5" />
                <span>Appeler le 18</span>
              </button>
            </div>
          </div>

          {/* Chat Container */}
          <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            {/* Messages */}
            <div className="h-96 overflow-y-auto p-6 space-y-4 bg-gray-50">
              {messages.map((msg, index) => (
                <div
                  key={index}
                  className={`flex ${
                    msg.sender === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  <div
                    className={`max-w-xs lg:max-w-md px-4 py-3 rounded-lg ${
                      msg.sender === "user"
                        ? "bg-blue-500 text-white"
                        : msg.isEmergency
                        ? "bg-red-100 border-l-4 border-red-500 text-red-800"
                        : "bg-white border border-gray-200 text-gray-800"
                    }`}
                  >
                    {msg.sender === "assistant" && msg.isEmergency && (
                      <div className="flex items-center space-x-2 mb-2">
                        <AlertTriangle className="w-5 h-5 text-red-600" />
                        <span className="font-semibold text-red-600">
                          URGENCE VITALE
                        </span>
                      </div>
                    )}

                    <div className="whitespace-pre-line text-sm">
                      {msg.text}
                    </div>

                    <div className="flex items-center justify-between mt-2">
                      <div
                        className={`text-xs ${
                          msg.sender === "user"
                            ? "text-blue-200"
                            : "text-gray-500"
                        }`}
                      >
                        <Clock className="w-3 h-3 inline mr-1" />
                        {msg.timestamp.toLocaleTimeString()}
                      </div>

                      {msg.sender === "assistant" && msg.source && (
                        <div className="flex items-center space-x-1 text-xs text-gray-500">
                          {getSourceIcon(msg.source)}
                          <span>{getSourceLabel(msg.source)}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}

              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-white border border-gray-200 px-4 py-3 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent"></div>
                      <span className="text-gray-600">
                        {HF_API_KEY
                          ? "IA m√©dicale en analyse..."
                          : "Analyse en cours..."}
                      </span>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Input Area */}
            <div className="p-6 bg-white border-t">
              <div className="flex space-x-4">
                <input
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="D√©crivez la situation d'urgence ou posez une question m√©dicale..."
                  className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  onKeyPress={(e) =>
                    e.key === "Enter" && !isLoading && handleSend()
                  }
                  disabled={isLoading}
                />
                <button
                  onClick={handleSend}
                  disabled={isLoading || !input.trim()}
                  className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-semibold flex items-center space-x-2 transition-colors"
                >
                  <Send className="w-5 h-5" />
                  <span>Envoyer</span>
                </button>
              </div>

              {/* Quick Actions */}
              <div className="mt-4 flex flex-wrap gap-2">
                {[
                  "Une personne s'√©touffe",
                  "Saignement abondant",
                  "Perte de conscience",
                  "Douleur √† la poitrine",
                  "Br√ªlure importante",
                  "Que faire en cas de fracture ?",
                  "Comment reconna√Ætre un AVC ?",
                ].map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => setInput(suggestion)}
                    className="px-3 py-1 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-full text-sm transition-colors"
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Disclaimer */}
          <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-center space-x-2">
              <Shield className="w-5 h-5 text-yellow-600" />
              <span className="font-semibold text-yellow-800">
                Avertissement Important
              </span>
            </div>
            <p className="text-yellow-700 text-sm mt-2">
              Cet assistant ne remplace pas un avis m√©dical professionnel. En
              cas d'urgence vitale, composez imm√©diatement le 18 (Pompiers). Les
              conseils fournis par l'IA MedAlpaca sont bas√©s sur l'apprentissage
              automatique et doivent √™tre confirm√©s par un professionnel de
              sant√©.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AssistantPremiersSecours;
